/* {{{ globals */
var game;
var currentRoundState = "";
var debug = localStorage.getItem("debug"); // set to true to debug events
var debugEVS = []; // DEBUG: list of events
var socket;
var mainDiv = document.getElementById('game');
var waitDiv = document.getElementById('wait');
var alertedDiv = document.getElementById('alerted');

/* }}} */

function processCommand(x){
  console.log("command", x);
  if (x.startsWith("save")) {
    $.post("@{SaveViewR}", currentRoundState);
  }
}

/* {{{ Sounds */
var sounds = {
  pop: new Howl({ urls: ["@{StaticR sound_pop_wav}"] })
};

function soundHandler(x) {
  sounds[x] && console.log(x);
  sounds[x] && sounds[x].play()
}
/* }}} */

/*{{{ elm initialization  */
mainDiv.hidden = true;

function initElm() {
  return Elm.embed(Elm.Main, mainDiv, { downstream : "" });
}

function startGame(doJoin) {
  socket = new WebSocket(#{String websocketURI});

  socket.onopen = function () {

    waitDiv.hidden = true;
    mainDiv.hidden = false;
    game = initElm();
    game.ports.sounds.subscribe(soundHandler);
    game.ports.upstream.subscribe(function(e) {
      var d = JSON.parse(e);
      if (debug) console.log("out", d);
      if (d.type === "msg" && d.content.startsWith("/")) {
        processCommand(d.content.slice(1));
      } else {
        if (d.type !== "noop") socket.send(e);
      }
    });

    game.ports.spyRoundState.subscribe(function(x) { currentRoundState = x });

    socket.onclose = function () {
      game.dispose();
      mainDiv.hidden = true;
      alerted("Connection to server has been lost! Please refresh this page", true);
    }

    socket.onmessage = function (e) {
       var data = JSON.parse(e.data);
        if (data.type == "identity") {
          setIdentity(data.nick, data.ident, data.token);
        }
        if (data.type == "invalid") {
          alerted(data.content);
        } else {
          if (debug) debugEvent(data);
        }
       game.ports.downstream.send(e.data);
    }

    socket.send(JSON.stringify(doJoin));
  }
}
/*}}}*/

/* {{{ error handling (notifications) */
function alerted(data, fatal) {
  if (data.startsWith("Handshake failed: Unknown identity:"))
    document.location = "@{AuthR LogoutR}";
  console.log(data);
  alertedDiv.innerHTML = data;
  if (!fatal && alertedDiv.hidden)
    setTimeout(function(){ alertedDiv.hidden = true; }, 8000);
  alertedDiv.hidden = false;
}
window.onerror = function(msg, file, lineNr) {
  alerted("FATAL ERROR: " + msg + file + lineNr + " please report this.", true);
  game.destroy();
  return false;
}
/* }}} */

/* {{{ Authentication */
function setIdentity(nick, ident, token) {
  localStorage.setItem("nick", nick);
  localStorage.setItem("ident", ident);
  localStorage.setItem("token", token);
}
/* }}} */

/* {{{ Debug */
function debugEvent(data) {
  if (data.type == "game-event") {
    for (ev in data.events) {
      console.log(data.events[ev]);
      debugEVS = debugEVS.concat(data.events[ev]);
    }
  } else {
    console.log("UNKNOWN", data);
  }
}

availableEvents = 
  {"tsumo":{"events":[{"event":"end","results":{"payers":[[2,16000],[3,16000],[4,16000]],"winners":[[1,48000,{"tiles":[{"type":"ManTile","number":1,"aka":false},{"type":"ManTile","number":1,"aka":false},{"type":"ManTile","number":1,"aka":false},{"type":"PinTile","number":1,"aka":false},{"type":"PinTile","number":1,"aka":false},{"type":"PinTile","number":1,"aka":false},{"type":"SouTile","number":1,"aka":false},{"type":"SouTile","number":1,"aka":false},{"type":"SouTile","number":1,"aka":false},{"ident":"Shaa","type":"HonorTile"},{"ident":"Shaa","type":"HonorTile"},{"ident":"Shaa","type":"HonorTile"},{"ident":"Hatsu","type":"HonorTile"},{"ident":"Hatsu","type":"HonorTile"}],"value":{"value":48000,"han":12,"named":"Yakuman","fu":0,"yaku":[{"name":"Toitoi","han":2}]},"mentsu":[]}]],"type":"dealtsumo"}}],"type":"game-event"},"invalid":{"content":"You are furiten","type":"invalid"},"draw":{"events":[{"event":"end","results":{"nooten":[[2,1000],[3,1000],[4,1000]],"tenpais":[[1,3000]],"type":"dealdraw"}}],"type":"game-event"}}

/* }}} */

// MAIN -------------------------------------------------------

joinToGame = #{maybe Null (Number . fromIntegral) mgid};
ident      = Number(localStorage.getItem("ident")); // Number(null) =  = 0 // player identity server-side
token      = localStorage.getItem("token");

// A hack to scroll the message dialog into view
window.setInterval(function(){
  e = document.getElementById("msg-messages");
  if (e) e.scrollTop = e.scrollHeight;
}, 1000);

$(function(){
  if (token) { // join with cached creds
    startGame({ "type": "join", "nick" : nick, "ident": ident, "token": token
              , "game": joinToGame });
  } else { // else go fetch token
    window.location.replace("@{AuthTokenR}" + window.location.search.replace("", ""));
  }
});
