/* {{{ globals */
var game;                    // the elm game object
var currentRoundState = "";  // updated from elm, used to save it to server on js side
var socket;                  // WebSocket to game server

var mainDiv    = document.getElementById('game') || { hidden: true };
var waitDiv    = document.getElementById('wait');
var alertedDiv = document.getElementById('alerted');

var debug = localStorage.getItem("debug"); // set to true to debug events
var debugEVS = [];                         // DEBUG: list of events

var muted = localStorage.getItem("muted");

var portConf = { downstream : "", profilePicturesInput : [] };
/* }}} */

/* {{{ Commands */
function processCommand(x){
  console.log("command", x);
  if (x.startsWith("save")) {
    $.post("@{SaveViewR}", currentRoundState);
  }
}
/* }}} */

/* {{{ Sounds */
var sounds = {
  pop: new Howl({ urls: ["@{StaticR sound_pop_wav}"] })
};

function soundHandler(x) {
  if (muted) return false;
  sounds[x] && console.log(x);
  sounds[x] && sounds[x].play()
}

function mute() {
  muted = true;
  localStorage.setItem("muted", true);
}
function unmute() {
  muted = false;
  localStorage.removeItem("muted");
}
/* }}} */

/*{{{ elm initialization  */
mainDiv.hidden = true;

function initElm() {
  if (#{Bool fullscreen}) {
    return Elm.fullscreen(Elm.Main, portConf);
  } else {
    return Elm.embed(Elm.Main, mainDiv, portConf);
  }
}

function startGame(doJoin) {
  socket = new WebSocket(#{String websocketURI});

  socket.onopen = function () {

    waitDiv.hidden = true;
    mainDiv.hidden = false;
    game = initElm();
    game.ports.sounds.subscribe(soundHandler);

    game.ports.upstream.subscribe(function(e) {
      var d = JSON.parse(e);
      if (debug) console.log("out", d);
      if (d.type === "msg" && d.content.startsWith("/")) {
        processCommand(d.content.slice(1));
      } else {
        if (d.type !== "noop") socket.send(e);
      }
    });

    // Profile pictures
    game.ports.profilePicturesRequest.subscribe(function(nicks) {
      if (nicks.length == 0) return;
      $.get("@{ProfilePicturesR}", { "nicks[]": nicks }, function(data) {
        game.ports.profilePicturesInput.send(data);
      });
    });

    game.ports.spyRoundState.subscribe(function(x) { currentRoundState = x });

    socket.onclose = function () {
      game.dispose();
      mainDiv.hidden = true;
      alerted("Connection to server has been lost! Please refresh this page", true);
    }

    socket.onmessage = function (e) {
       var data = JSON.parse(e.data);
        if (data.type == "identity") {
          localStorage.setItem("ident", data.ident);
          localStorage.setItem("token", data.token);
        }
        if (data.type == "invalid") {
          handleInvalidEvent(data.content);
        } else {
          if (debug) debugEvent(data);
        }
       game.ports.downstream.send(e.data);
    }

    socket.send(JSON.stringify(doJoin));
  }
}
/*}}}*/

/* {{{ error handling (notifications) */

function handleInvalidEvent(content) {
  if (content.startsWith("Handshake failed: Unknown identity:")) {
    authenticateGameServer();
  } else {
    alerted(content);
  }
}

function alerted(data, fatal) {
  console.log(data);
  alertedDiv.innerHTML = data;
  if (!fatal && alertedDiv.hidden)
    setTimeout(function(){ alertedDiv.hidden = true; }, 8000);
  alertedDiv.hidden = false;
}

window.onerror = function(msg, file, lineNr) {
  alerted("FATAL ERROR: " + msg + file + lineNr + " please report this.", true);
  game.destroy();
  return false;
}
/* }}} */

/* {{{ Authentication */
function authenticateGameServer(){
  localStorage.removeItem("ident");
  localStorage.removeItem("token");
  window.location.replace("@{AuthTokenR}" + window.location.search.replace("", ""));
}
/* }}} */

/* {{{ Debug */
function debugEvent(data) {
  if (data.type == "game-event") {
    for (ev in data.events) {
      console.log(data.events[ev]);
      debugEVS = debugEVS.concat(data.events[ev]);
    }
  } else {
    console.log("UNKNOWN", data);
  }
}

availableEvents = 
  {"tsumo":{"events":[{"event":"end","results":{"payers":[[2,16000],[3,16000],[4,16000]],"winners":[[1,48000,{"tiles":[{"type":"ManTile","number":1,"aka":false},{"type":"ManTile","number":1,"aka":false},{"type":"ManTile","number":1,"aka":false},{"type":"PinTile","number":1,"aka":false},{"type":"PinTile","number":1,"aka":false},{"type":"PinTile","number":1,"aka":false},{"type":"SouTile","number":1,"aka":false},{"type":"SouTile","number":1,"aka":false},{"type":"SouTile","number":1,"aka":false},{"ident":"Shaa","type":"HonorTile"},{"ident":"Shaa","type":"HonorTile"},{"ident":"Shaa","type":"HonorTile"},{"ident":"Hatsu","type":"HonorTile"},{"ident":"Hatsu","type":"HonorTile"}],"value":{"value":48000,"han":12,"named":"Yakuman","fu":0,"yaku":[{"name":"Toitoi","han":2}]},"mentsu":[]}]],"type":"dealtsumo"}}],"type":"game-event"},"invalid":{"content":"You are furiten","type":"invalid"},"draw":{"events":[{"event":"end","results":{"nooten":[[2,1000],[3,1000],[4,1000]],"tenpais":[[1,3000]],"type":"dealdraw"}}],"type":"game-event"}}

/* }}} */

// MAIN -------------------------------------------------------

// Try joining this game
joinToGame = #{maybe Null (Number . fromIntegral) mgid};
nick       = #{maybe Null String muserName};

// player identity on game server
ident      = Number(localStorage.getItem("ident")); // Number(null) =  = 0
token      = localStorage.getItem("token");
if (!token) authenticateGameServer();

// A hack to scroll the message dialog into view
window.setInterval(function(){
  e = document.getElementById("msg-messages");
  if (e) e.scrollTop = e.scrollHeight;
}, 1000);

startGame({ "type": "join", "nick" : nick, "ident": ident, "token": token
          , "game": joinToGame });
